{
  "$this->\u2026": {
    "body": "\\$this->$0;",
    "description": "$this->...",
    "prefix": "this"
  },
  "$\u2026 = ( \u2026 ) ? \u2026 : \u2026": {
    "body": "\\$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b} ;",
    "description": "Ternary conditional assignment",
    "prefix": "if?"
  },
  "$\u2026 = [\u2026]": {
    "body": "\\$${1:arrayName} = ['$2' => $3${4:,} $0];",
    "description": "Array initializer",
    "prefix": "shorray"
  },
  "$\u2026 = array (\u2026)": {
    "body": "\\$${1:arrayName} = array('$2' => $3${4:,} $0);",
    "description": "Array initializer",
    "prefix": "array"
  },
  "PHPDoc class \u2026": {
    "body": [
      "/**",
      " * ${6:undocumented class}",
      " */",
      "class ${1:ClassName} ${2:extends ${3:AnotherClass}} ${4:implements ${5:Interface}} {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Documented Class Declaration",
    "prefix": "doc_class"
  },
  "PHPDoc function \u2026": {
    "body": [
      "/**",
      " * ${1:undocumented function summary}",
      " *",
      " * ${2:Undocumented function long description}",
      " *",
      "${3: * @param ${4:Type} \\$${5:var} ${6:Description}}",
      "${7: * @return ${8:type}}",
      "${9: * @throws ${10:conditon}}",
      " **/",
      "${11:public }function ${12:FunctionName}(${13:${14:${4:Type} }\\$${5:var}${15: = ${16:null}}}) {",
      "\t${0:# code...}",
      "}"
    ],
    "description": "Documented function",
    "prefix": "doc_f"
  },
  "PHPDoc param \u2026": {
    "body": [
      "* @param ${1:Type} ${2:var} ${3:Description}$0"
    ],
    "description": "Paramater documentation",
    "prefix": "param"
  },
  "PHPDoc property": {
    "body": [
      "/** @var ${1:Type} \\$${2:var} ${3:description} */",
      "${4:protected} \\$${2:var}${5: = ${6:null}};$0"
    ],
    "description": "Documented Class Variable",
    "prefix": "doc_v"
  },
  "Region End": {
    "body": [
      "#endregion"
    ],
    "description": "Folding Region End",
    "prefix": "#endregion"
  },
  "Region Start": {
    "body": [
      "#region"
    ],
    "description": "Folding Region Start",
    "prefix": "#region"
  },
  "Throw Exception": {
    "body": [
      "throw new $1Exception(${2:\"${3:Error Processing Request}\"}${4:, ${5:1}});",
      "$0"
    ],
    "description": "Throw exception",
    "prefix": "throw"
  },
  "Try Catch Block": {
    "body": [
      "try {",
      "\t${1://code...}",
      "} catch (${2:\\Throwable} ${3:\\$th}) {",
      "\t${4://throw \\$th;}",
      "}"
    ],
    "description": "Try catch block",
    "prefix": "try"
  },
  "case \u2026": {
    "body": [
      "case '${1:value}':",
      "\t${0:# code...}",
      "\tbreak;"
    ],
    "description": "Case Block",
    "prefix": "case"
  },
  "class \u2026": {
    "body": [
      "class ${1:ClassName} ${2:extends ${3:AnotherClass}} ${4:implements ${5:Interface}} {",
      "\t$0",
      "}",
      ""
    ],
    "description": "Class definition",
    "prefix": "class"
  },
  "define(\u2026, \u2026)": {
    "body": [
      "define('$1', ${2:'$3'});",
      "$0"
    ],
    "description": "Definition",
    "prefix": "def"
  },
  "do \u2026 while \u2026": {
    "body": [
      "do {",
      "\t${0:# code...}",
      "} while (${1:\\$${2:a} <= ${3:10}});"
    ],
    "description": "Do-While loop",
    "prefix": "do"
  },
  "echo $this->\u2026": {
    "body": "echo \\$this->$0;",
    "description": "Echo this",
    "prefix": "ethis"
  },
  "else \u2026": {
    "body": [
      "else {",
      "\t${0:# code...}",
      "}"
    ],
    "description": "Else block",
    "prefix": "else"
  },
  "elseif \u2026": {
    "body": [
      "elseif (${1:condition}) {",
      "\t${0:# code...}",
      "}"
    ],
    "description": "Elseif block",
    "prefix": "elseif"
  },
  "for \u2026": {
    "body": [
      "for (\\$${1:i}=${2:0}; \\$${1:i} < $3; \\$${1:i}++) { ",
      "\t${0:# code...}",
      "}"
    ],
    "description": "For-loop",
    "prefix": "for"
  },
  "foreach \u2026": {
    "body": [
      "foreach (\\$${1:variable} as \\$${2:key} ${3:=> \\$${4:value}}) {",
      "\t${0:# code...}",
      "}"
    ],
    "description": "Foreach loop",
    "prefix": "foreach"
  },
  "function __construct": {
    "body": [
      "${1:public} function __construct(${2:${3:Type} \\$${4:var}${5: = ${6:null}}}) {",
      "\t\\$this->${4:var} = \\$${4:var};$0",
      "}"
    ],
    "prefix": "con"
  },
  "function \u2026": {
    "body": [
      "${1:public }function ${2:FunctionName}(${3:${4:${5:Type} }\\$${6:var}${7: = ${8:null}}}) {",
      "\t${0:# code...}",
      "}"
    ],
    "description": "Function",
    "prefix": "fun"
  },
  "if \u2026": {
    "body": [
      "if (${1:condition}) {",
      "\t${0:# code...}",
      "}"
    ],
    "description": "If block",
    "prefix": "if"
  },
  "if \u2026 else \u2026": {
    "body": [
      "if (${1:condition}) {",
      "\t${2:# code...}",
      "} else {",
      "\t${3:# code...}",
      "}",
      "$0"
    ],
    "description": "If Else block",
    "prefix": "ifelse"
  },
  "switch \u2026": {
    "body": [
      "switch (\\$${1:variable}) {",
      "\tcase '${2:value}':",
      "\t\t${3:# code...}",
      "\t\tbreak;",
      "\t$0",
      "\tdefault:",
      "\t\t${4:# code...}",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch block",
    "prefix": "switch"
  },
  "trait \u2026": {
    "body": [
      "/**",
      " * $1",
      " */",
      "trait ${2:TraitName}",
      "{",
      "\t$0",
      "}",
      ""
    ],
    "description": "Trait",
    "prefix": "trait"
  },
  "while \u2026": {
    "body": [
      "while (${1:\\$${2:a} <= ${3:10}}) {",
      "\t${0:# code...}",
      "}"
    ],
    "description": "While-loop",
    "prefix": "while"
  },
  "\u2026 => \u2026": {
    "body": "'$1' => $2${3:,} $0",
    "description": "Key-Value initializer",
    "prefix": "keyval"
  }
}

{
  "Assert": {
    "body": "self.assert_(${1:boolean expression}${2:, '${3:message}'})$0",
    "prefix": "as"
  },
  "Assert False": {
    "body": "self.assertFalse(${1:actual}${2:, '${3:message}'})$0",
    "prefix": "asf"
  },
  "Assert True": {
    "body": "self.assertTrue(${1:actual}${2:, '${3:message}'})$0",
    "prefix": "ast"
  },
  "Assert equal": {
    "body": "self.assertEqual(${1:expected}, ${2:actual}${3:, '${4:message}'})$0",
    "prefix": "ase"
  },
  "Assert in": {
    "body": "self.assertIn(${1:needle}, ${2:haystack}${3:, '${4:message}'})$0",
    "prefix": "asin"
  },
  "Assert is": {
    "body": "self.assertIs(${1:expected}, ${2:actual}${3:, '${4:message}'})$0",
    "prefix": "asi"
  },
  "Assert is None": {
    "body": "self.assertIsNone(${1:actual}${2:, '${3:message}'})$0",
    "prefix": "asino"
  },
  "Assert is not": {
    "body": "self.assertIsNot(${1:expected}, ${2:actual}${3:, '${4:message}'})$0",
    "prefix": "asint"
  },
  "Assert is not None": {
    "body": "self.assertIsNotNone(${1:actual}${2:, '${3:message}'})$0",
    "prefix": "asinno"
  },
  "Assert not equal": {
    "body": "self.assertNotEqual(${1:expected}, ${2:actual}${3:, '${4:message}'})$0",
    "prefix": "asne"
  },
  "Assert not in": {
    "body": "self.assertNotIn(${1:needle}, ${2:haystack}${3:, '${4:message}'})$0",
    "prefix": "asni"
  },
  "Assert raises": {
    "body": "self.assertRaises(${1:exception}, ${2:callable}, ${3:args})$0",
    "prefix": "asr"
  },
  "Fail (a test)": {
    "body": "self.fail('${1:message}')$0",
    "prefix": "fail"
  }
}

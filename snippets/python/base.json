{
  "# -*- coding=utf-8 -*-": {
    "body": "# -*- coding=utf-8 -*-\n$0",
    "description": "set default python2.x encoding specification to utf-8 as it is mentioned in pep-0263.",
    "prefix": "enc"
  },
  "# coding=utf-8": {
    "body": "# coding=utf-8\n$0",
    "description": "Set default python3 encoding specification to utf-8, by default this is the encoding for python3.x as it is mentioned in pep-3120.",
    "prefix": "enco"
  },
  "#!/usr/bin/env python": {
    "body": "#!/usr/bin/env python\n$0",
    "description": "Adds shebang line for default python interpreter.",
    "prefix": "env"
  },
  "#!/usr/bin/env python3": {
    "body": "#!/usr/bin/env python3\n$0",
    "description": "Adds shebang line for default python 3 interpreter.",
    "prefix": "env3"
  },
  "New async function": {
    "body": "async def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "Code snippet for async function definition.",
    "prefix": "adef"
  },
  "New class": {
    "body": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0",
    "description": "Code snippet for a class definition.",
    "prefix": "classi"
  },
  "New function": {
    "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
    "description": "Code snippet for function definition.",
    "prefix": "def"
  },
  "New function w/ return": {
    "body": "def ${1:fname}(${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0",
    "description": "Code snippet for function definition.",
    "prefix": "deft"
  },
  "New method": {
    "body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}$0",
    "description": "Code snippet for a class method definition.",
    "prefix": "defs"
  },
  "New method w/ return": {
    "body": "def ${1:mname}(self, ${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0",
    "description": "Code snippet for a class method definition.",
    "prefix": "defst"
  },
  "New property": {
    "body": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value",
    "description": "New property: get and set via decorator",
    "prefix": "property"
  },
  "__magic__": {
    "body": "__${1:init}__$0",
    "description": "Code snippet to create magic methods.",
    "prefix": "__"
  },
  "class": {
    "body": [
      "class ${1:classname}(${2:object}):",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a class definition",
    "prefix": "class"
  },
  "elif": {
    "body": [
      "elif ${1:expression}:",
      "\t${2:pass}"
    ],
    "description": "Code snippet for an elif",
    "prefix": "elif"
  },
  "else": {
    "body": [
      "else:",
      "\t${1:pass}"
    ],
    "description": "Code snippet for an else",
    "prefix": "else"
  },
  "for": {
    "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
    "description": "Code snippet to create a for loop structure.",
    "prefix": "for"
  },
  "for/else": {
    "body": [
      "for ${1:target_list} in ${2:expression_list}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a for loop with else",
    "prefix": "for/else"
  },
  "from ... import ...": {
    "body": "from ${1:package/module} import ${2:names}$0",
    "description": "Import statement that allows individual objects from the module to be imported directly into the caller\u2019s symbol table.",
    "prefix": "fim"
  },
  "from future import ...": {
    "body": [
      "# -*- coding: utf-8 -*-",
      "from __future__ import absolute_import, division, print_function, unicode_literals"
    ],
    "description": "Import future statement definitions for python2.x scripts using utf-8 as encoding.",
    "prefix": "fenc"
  },
  "from future import ... v1": {
    "body": [
      "# coding: utf-8",
      "from __future__ import absolute_import, division, print_function, unicode_literals"
    ],
    "description": "Import future statement definitions for python3.x scripts using utf-8 as encoding.",
    "prefix": "fenco"
  },
  "if": {
    "body": "if ${1:condition}:\n\t${2:pass}$0",
    "description": "Code snippet for the if statement.",
    "prefix": "if"
  },
  "if __name__ == \"__main__\"": {
    "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
    "description": "Create implicitly all the code at the top level using the __name__ special variable.",
    "prefix": "ifmain"
  },
  "if/else": {
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for an if statement with else",
    "prefix": "if/else"
  },
  "import": {
    "body": "import ${1:package/module}$0",
    "description": "Import a package or module",
    "prefix": "im"
  },
  "self": {
    "body": "self.$0",
    "description": "Shortend snippet to reference the self property in an object.",
    "prefix": "."
  },
  "try:except:": {
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
    "description": "Code Snippet for a try and except blocks.",
    "prefix": "try"
  },
  "try:except:else": {
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0",
    "description": "Code Snippet for a try/except with else statement.",
    "prefix": "trye"
  },
  "try:except:else:finally": {
    "body": "try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0",
    "description": "Code Snippet for a try/except/finally with else statement.",
    "prefix": "tryef"
  },
  "try:except:finally": {
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
    "description": "Code Snippet for a try/except/finally.",
    "prefix": "tryf"
  },
  "while": {
    "body": "while ${1:condition}:\n\t${2:pass}$0",
    "description": "Code snippet to create a while loop structure.",
    "prefix": "while"
  },
  "while/else": {
    "body": [
      "while ${1:expression}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a while loop with else",
    "prefix": "while/else"
  },
  "with": {
    "body": [
      "with ${1:expression} as ${2:target}:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a with statement",
    "prefix": "with"
  }
}

{
  "assigment": {
    "body": [
      "local ${1:varName} = ${0:value}"
    ],
    "description": "create a variable",
    "prefix": "ll"
  },
  "class": {
    "body": [
      "${1:className} = {}\n",
      "$1.${2:new} = function($3)",
      "\tlocal ${4:varName} = ${5:value}\n",
      "\t${6: --code}\n",
      "\treturn $4",
      "end"
    ],
    "description": "Create a class",
    "prefix": "cl"
  },
  "elseif": {
    "body": [
      "elseif ${1:true} then",
      "\t$0"
    ],
    "prefix": "elseif"
  },
  "for": {
    "body": [
      "for ${1:i}=${2:1},${3:10} do",
      "\t$0",
      "end"
    ],
    "description": "for loop range",
    "prefix": "for"
  },
  "foreach": {
    "body": [
      "for i, ${1:x} in pairs(${2:table}) do",
      "\t$0",
      "end"
    ],
    "prefix": "foreach"
  },
  "forline": {
    "body": [
      "f = io.open(${1:\"${2:filename}\"}, \"${3:r}\")\n",
      "while true do",
      "\tline = f:read()",
      "\tif line == nil then break end\n",
      "\t${0:-- code}",
      "end"
    ],
    "description": "read file line by line",
    "prefix": "forline"
  },
  "function": {
    "body": [
      "function ${1:name}($2)",
      "\t${0:-- code}",
      "end"
    ],
    "prefix": "fu"
  },
  "if": {
    "body": [
      "if ${1:true} then",
      "\t$0",
      "end"
    ],
    "prefix": "if"
  },
  "inline-function": {
    "body": [
      "local ${1:name} = function($2)",
      "\t${0:-- code}",
      "end"
    ],
    "prefix": "f="
  },
  "local": {
    "body": [
      "local ${0}"
    ],
    "description": "create a variable",
    "prefix": "l"
  },
  "locpcall": {
    "body": [
      "local ${1:status}, ${2:err_or_value} = pcall(${3:function})"
    ],
    "description": "Protect call a function as a variable",
    "prefix": "lpca"
  },
  "locreq": {
    "body": [
      "local ${1:var} = require(\"${2:module}\")"
    ],
    "description": "Require module as a variable",
    "prefix": "lreq"
  },
  "pcall": {
    "body": [
      "pcall(${1:function})"
    ],
    "description": "Protect call a function",
    "prefix": "pca"
  },
  "print": {
    "body": [
      "print(${0})"
    ],
    "prefix": "p"
  },
  "require": {
    "body": [
      "require(\"${1:module}\")"
    ],
    "description": "Require module",
    "prefix": "req"
  },
  "return": {
    "body": [
      "return $0"
    ],
    "description": "return value",
    "prefix": "rt"
  },
  "self": {
    "body": [
      "function self:${1:methodName}($2)",
      "\t$0",
      "end"
    ],
    "prefix": "self:"
  },
  "while": {
    "body": [
      "while ${1:true} do",
      "\t$0",
      "end"
    ],
    "prefix": "while"
  }
}

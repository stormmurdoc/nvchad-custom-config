global !p
def get_parent_directory(filename, dir_level=1):
  import os
  path = os.path.normpath(os.path.abspath(filename))
  split_path = path.split(os.sep)
  return split_path[-(dir_level + 1)]
endglobal

snippet tags "ansible tags" !b
tags:
	- ${1:`!p snip.rv = get_parent_directory(path, 2)`}
endsnippet

snippet head "ansible header" !b
---
# file: `!p snip.rv = fn`

endsnippet

snippet service "ansible service" !b
- name: ${1:#service} service ${2:#started|stopped}
  service: name=$1 state=$2 enabled=${3:#yes|no}
  tags:
    - ${4:`!p snip.rv = get_parent_directory(path, 2)`}
endsnippet

snippet topplay "ansible topplay" !b
---
# file: `!p snip.rv = fn`
- ${1:webservers}
  vars_files:
    - group_vars/$1
  roles:
    - ${2:common}
    - ${3:webtier}
  become: yes
endsnippet

snippet dir "ansible directory" !b
- name: Create ${1:#directory}
  file: path=$1 state=directory owner=root group=root mode=0755
  tags:
    - ${4:`!p snip.rv = get_parent_directory(path, 2)`}
endsnippet

snippet repo "ansible repo" !b
- name: ${1:#description} Repo
  apt_repository: repo='${2:#repoline}' state=present update_cache=yes
  tags:
    - ${4:`!p snip.rv = get_parent_directory(path, 2)`}
endsnippet

snippet packages "ansible packages" !b
- name: install ${1:#description} packages
  package: name={{ item }} state=present
  with_items:
  - ${2:#package}
  tags:
    - ${3:`!p snip.rv = get_parent_directory(path, 2)`}
endsnippet

snippet template "ansible template" !b
- name: ${1:#description}
  template: src=${2:#source} dest=${3:/etc/destination} owner=root group=root mode=0644
  notify:
  - ${4:#restart service}
endsnippet

snippet file  "ansible file" !b
- name: ${1:#description}
  copy: src=${2:#source} dest=${3:/etc/destination} owner=root group=root mode=0644
  notify:
  - ${4:#restart service}
  tags:
    - ${4:`!p snip.rv = get_parent_directory(path, 2)`}
endsnippet

snippet symlink  "ansible symlink" !b
- name: ${1:#description}
  file: src=${2:#source} dest=${3:/etc/destination} state=link
  tags:
    - ${4:`!p snip.rv = get_parent_directory(path, 2)`}
endsnippet

snippet handler  "ansible handler" !b
- name: restart ${1:#service}
  service: name=$1 state=restarted
endsnippet

snippet cron  "ansible cron" !b
- name: cronname
  cron: name="cronname" user="username"
    job="cd {{ app_portal.approot }}; flock -n temp/Report-Scheduler.lck ./app/console Report:Scheduler --env={{ app_portal.symfonyenv }}"
  tags:
    - ${4:`!p snip.rv = get_parent_directory(path, 2)`}
endsnippet

snippet whenfile  "ansible whenfile" !b
- name: check somefile exists
  stat: path=/etc/somefile.conf
  register: stat_result
  tags:
    - ${4:`!p snip.rv = get_parent_directory(path, 2)`}

- name: copy template only if somefile does not exist
  template: src=somefile.j2 dest=/etc/somefile.conf
  when: not stat_result.stat.exists
  tags:
    - ${4:`!p snip.rv = get_parent_directory(path, 2)`}
endsnippet
